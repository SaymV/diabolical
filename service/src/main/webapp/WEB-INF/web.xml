<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns="http://java.sun.com/xml/ns/javaee"
    xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
    http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
    version="2.5">

    <display-name>Headmaster Web Resource</display-name>

    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>
            classpath:applicationContext.xml
        </param-value>
    </context-param>

    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <listener>
        <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
    </listener>

    <servlet>
        <servlet-name>jersey</servlet-name>
        <servlet-class>com.sun.jersey.spi.spring.container.servlet.SpringServlet</servlet-class>
        <init-param>
            <param-name>com.sun.jersey.config.property.resourceConfigClass</param-name>
            <param-value>com.sun.jersey.api.core.PackagesResourceConfig</param-value>
        </init-param>
        <init-param>  
            <param-name>com.sun.jersey.spi.container.ResourceFilters</param-name>  
            <param-value>com.sun.jersey.api.container.filter.RolesAllowedResourceFilterFactory</param-value>  
        </init-param>  
        <init-param>
            <param-name>com.sun.jersey.config.property.packages</param-name>
            <param-value>edu.lmu.cs.headmaster.ws.resource</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <!--
        Let Jersey handle *everything*.
    -->
    <servlet-mapping>
        <servlet-name>jersey</servlet-name>
        <url-pattern>/*</url-pattern>
    </servlet-mapping>

    <!--
        Allow access only to valid users.  We're not restricting access to resources by roles here
        in the web.xml.  Instead, we will be using authorization annotations within the resource
        classes.
    -->
    <security-constraint>
        <web-resource-collection>
            <web-resource-name>Whole application access</web-resource-name>
            <url-pattern>/*</url-pattern>
        </web-resource-collection>
        <auth-constraint>
            <role-name>*</role-name>
        </auth-constraint>
        <user-data-constraint>
            <!-- Set to NONE for HTTP, or CONFIDENTIAL for HTTPS -->
            <transport-guarantee>NONE</transport-guarantee>
        </user-data-constraint>
    </security-constraint>

    <!--
        Basic Auth is okay here because the web resources are only being called by the various web
        applications' servers and are not accessible by users (of the webapp).  Of course, this
        could be changed to DIGEST or CLIENT_CERT later.
    -->
    <login-config>
        <auth-method>BASIC</auth-method>
    </login-config>

    <security-role>
        <role-name>*</role-name>
    </security-role>
</web-app>
